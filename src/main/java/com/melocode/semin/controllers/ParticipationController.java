package com.melocode.semin.controllers;

import com.melocode.semin.dao.ParticipationDAO;
import com.melocode.semin.dao.SeminaireDAO;
import com.melocode.semin.models.Participation;
import com.melocode.semin.models.Seminaire;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import java.time.LocalDate;
import java.util.List;

public class ParticipationController {

    @FXML private TableView<Participation> tableView;
    @FXML private TableColumn<Participation, Integer> idColumn, employeIdColumn, seminaireIdColumn;
    @FXML private TableColumn<Participation, String> statutColumn;
    @FXML private TableColumn<Participation, LocalDate> dateInscriptionColumn;
    @FXML private Button ajouterButton, supprimerButton;
    @FXML private TableColumn<Participation, String> evaluationColumn;
    @FXML private TableColumn<Participation, String> certificatColumn;
    @FXML private TextField statutField, evaluationField, certificatField;
    @FXML private ComboBox<String> seminaireComboBox; // For selecting the seminar
    @FXML private Label coutLabel; // Assuming you have a label to show the seminar cost

    private ObservableList<Participation> participationList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // Initialize table columns
        SeminaireDAO seminarDAO = new SeminaireDAO();  // Assuming you have a DAO for seminars
        List<Seminaire> seminars = seminarDAO.getAllSeminaires();

        ObservableList<String> seminarNames = FXCollections.observableArrayList();
        for (Seminaire seminar : seminars) {
            seminarNames.add(seminar.getNom());
        }
        seminaireComboBox.setItems(seminarNames);

        idColumn.setCellValueFactory(cellData -> cellData.getValue().ID_ParticipationProperty().asObject());
        seminaireIdColumn.setCellValueFactory(cellData -> cellData.getValue().ID_SeminaireProperty().asObject());
        statutColumn.setCellValueFactory(cellData -> cellData.getValue().statutProperty());
        dateInscriptionColumn.setCellValueFactory(cellData -> cellData.getValue().dateInscriptionProperty());
        evaluationColumn.setCellValueFactory(cellData -> cellData.getValue().evaluationProperty());
        certificatColumn.setCellValueFactory(cellData -> cellData.getValue().certificatProperty());

        // Populate the table with the data from the database
        loadParticipations();

        // Add listener to ComboBox to update the cost when the seminar is selected
        seminaireComboBox.valueProperty().addListener((observable, oldValue, newValue) -> updateCout());
    }

    @FXML
    private void ajouterParticipation() {
        // Validate inputs (you may add more validation logic here)
        String statut = statutField.getText();
        String evaluation = evaluationField.getText();
        String certificat = certificatField.getText();
        String selectedSeminar = seminaireComboBox.getValue();

        if (statut.isEmpty() || selectedSeminar == null) {
            showAlert(Alert.AlertType.WARNING, "Validation Error", "Please fill in all the required fields.");
            return;
        }

        // Find the seminar by name
        SeminaireDAO seminarDAO = new SeminaireDAO();
        Seminaire seminar = seminarDAO.getSeminarByName(selectedSeminar);

        if (seminar == null) {
            showAlert(Alert.AlertType.ERROR, "Seminar Error", "Selected seminar does not exist.");
            return;
        }

        // Create a new Participation object and add it to the database
        Participation newParticipation = new Participation(
                0, // ID is generated by the database
                1, // ID_Employe (You can pass the actual employee ID here)
                seminar.getId(), // Use the actual seminar ID
                statut,
                LocalDate.now(), // Current date for registration
                evaluation,
                certificat
        );

        ParticipationDAO participationDAO = new ParticipationDAO();
        participationDAO.ajouterParticipation(newParticipation);

        // Reload the participations to reflect the new one
        loadParticipations();
    }

    @FXML
    private void supprimerParticipation() {
        Participation selected = tableView.getSelectionModel().getSelectedItem();
        if (selected != null) {
            // Delete the selected participation from the database
            ParticipationDAO participationDAO = new ParticipationDAO();
            participationDAO.supprimerParticipation(selected.getID_Participation());

            // Reload the participations to reflect the deletion
            loadParticipations();
        } else {
            showAlert(Alert.AlertType.WARNING, "Selection Error", "Please select a participation to delete.");
        }
    }

    private void loadParticipations() {
        // Fetch all participations from the database
        ParticipationDAO participationDAO = new ParticipationDAO();
        participationList.clear();
        participationList.addAll(participationDAO.getAllParticipations());

        // Update the table view
        tableView.setItems(participationList);
    }

    @FXML
    private void updateCout() {
        String selectedSeminarName = seminaireComboBox.getValue();

        if (selectedSeminarName != null) {
            SeminaireDAO seminarDAO = new SeminaireDAO();
            Seminaire selectedSeminar = seminarDAO.getSeminarByName(selectedSeminarName); // Get the seminar by name

            if (selectedSeminar != null) {
                // Update the cost label with the seminar's cost
                coutLabel.setText("Cost: " + selectedSeminar.getCout());
            }
        }
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}
