package com.melocode.semin.controllers;




import com.melocode.semin.dao.ParticipationDAO;
import com.melocode.semin.dao.SeminaireDAO;
import com.melocode.semin.models.Participation;
import com.melocode.semin.models.Seminaire;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.List;

public class StatisticsController {

    @FXML private TableView<Participation> tableView;
    @FXML private TableColumn<Participation, Integer> idColumn, seminaireIdColumn;
    @FXML private TableColumn<Participation, String> statutColumn, evaluationColumn, certificatColumn;
    @FXML private TableColumn<Participation, LocalDate> dateInscriptionColumn;
    @FXML private TextField statutField, evaluationField, certificatField;
    @FXML private ComboBox<String> seminaireComboBox;
    @FXML private Label coutLabel;
    @FXML private PieChart pieChart;
    @FXML private ScatterChart<String, Number> scatterChart;

    private ObservableList<Participation> participationList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // Initialize table columns
        idColumn.setCellValueFactory(cellData -> cellData.getValue().ID_ParticipationProperty().asObject());
        seminaireIdColumn.setCellValueFactory(cellData -> cellData.getValue().ID_SeminaireProperty().asObject());
        statutColumn.setCellValueFactory(cellData -> cellData.getValue().statutProperty());
        dateInscriptionColumn.setCellValueFactory(cellData -> cellData.getValue().dateInscriptionProperty());
        evaluationColumn.setCellValueFactory(cellData -> cellData.getValue().evaluationProperty());
        certificatColumn.setCellValueFactory(cellData -> cellData.getValue().certificatProperty());

        // Load seminars into ComboBox
        loadSeminars();
        // Load participations into TableView
        loadParticipations();
        // Initialize charts
        updateCharts();
    }

    private void loadSeminars() {
        SeminaireDAO seminarDAO = new SeminaireDAO();
        List<Seminaire> seminars = seminarDAO.getAllSeminaires();
        ObservableList<String> seminarNames = FXCollections.observableArrayList();
        for (Seminaire seminar : seminars) {
            seminarNames.add(seminar.getNom());
        }
        seminaireComboBox.setItems(seminarNames);
    }

    @FXML
    private void ajouterParticipation() {
        String statut = statutField.getText();
        String evaluation = evaluationField.getText();
        String certificat = certificatField.getText();
        String selectedSeminar = seminaireComboBox.getValue();

        if (statut.isEmpty() || selectedSeminar == null) {
            showAlert(Alert.AlertType.WARNING, "Validation Error", "Please fill in all the required fields.");
            return;
        }

        SeminaireDAO seminarDAO = new SeminaireDAO();
        Seminaire seminar = seminarDAO.getSeminarByName(selectedSeminar);

        if (seminar == null) {
            showAlert(Alert.AlertType.ERROR, "Seminar Error", "Selected seminar does not exist.");
            return;
        }

        Participation newParticipation = new Participation(
                0, // ID is generated by the database
                1, // ID_Employe (You can pass the actual employee ID here)
                seminar.getId(),
                statut,
                LocalDate.now(),
                evaluation,
                certificat
        );

        ParticipationDAO participationDAO = new ParticipationDAO();
        participationDAO.ajouterParticipation(newParticipation);

        loadParticipations();
        updateCharts(); // Update charts after adding a participation
    }

    @FXML
    private void supprimerParticipation() {
        Participation selected = tableView.getSelectionModel().getSelectedItem();
        if (selected != null) {
            ParticipationDAO participationDAO = new ParticipationDAO();
            participationDAO.supprimerParticipation(selected.getID_Participation());
            loadParticipations();
            updateCharts(); // Update charts after deleting a participation
        } else {
            showAlert(Alert.AlertType.WARNING, "Selection Error", "Please select a participation to delete.");
        }
    }

    private void loadParticipations() {
        ParticipationDAO participationDAO = new ParticipationDAO();
        participationList.clear();
        participationList.addAll(participationDAO.getAllParticipations());
        tableView.setItems(participationList);
    }

    private void updateCharts() {
        updatePieChart();
        updateScatterChart();
    }

    private void updatePieChart() {
        // Clear any existing data
        pieChart.getData().clear();

        // Retrieve all participations from the DAO
        ParticipationDAO participationDAO = new ParticipationDAO();
        List<Participation> participations = participationDAO.getAllParticipations();

        // Count the number of participations for each status
        long confirmedCount = participations.stream()
                .filter(p -> p.getStatut().equalsIgnoreCase("présent"))
                .count();
        long pendingCount = participations.stream()
                .filter(p -> p.getStatut().equalsIgnoreCase("Inscrit"))
                .count();
        long cancelledCount = participations.stream()
                .filter(p -> p.getStatut().equalsIgnoreCase("en attente"))
                .count();


        // Create PieChart data objects for each status
        PieChart.Data confirmedData = new PieChart.Data("présent", confirmedCount);
        PieChart.Data pendingData   = new PieChart.Data("Inscrit", pendingCount);
        PieChart.Data cancelledData = new PieChart.Data("en attente", cancelledCount);


        // Add data to the PieChart
        pieChart.getData().addAll(confirmedData, pendingData, cancelledData);

        // Use Platform.runLater to style the slices after nodes are created
        Platform.runLater(() -> {
            for (PieChart.Data data : pieChart.getData()) {
                String status = data.getName().toLowerCase();
                if (status.equals("présent") || status.equals("présent")) {
                    data.getNode().setStyle("-fx-pie-color: green;");
                } else if (status.equals("Inscrit")) {
                    data.getNode().setStyle("-fx-pie-color: orange;");
                } else if (status.equals("en attente")) {
                    data.getNode().setStyle("-fx-pie-color: red;");
                }
                 else {
                    data.getNode().setStyle("-fx-pie-color: grey;");
                }
            }
        });
    }


    private void updateScatterChart() {
        scatterChart.getData().clear();
        ParticipationDAO participationDAO = new ParticipationDAO();
        List<Participation> participations = participationDAO.getAllParticipations();

        // One series per status
        XYChart.Series<String, Number> confirmeSeries = new XYChart.Series<>();
        confirmeSeries.setName("présent");

        XYChart.Series<String, Number> presentSeries = new XYChart.Series<>();
        presentSeries.setName("Inscrit");

        XYChart.Series<String, Number> absentSeries = new XYChart.Series<>();
        absentSeries.setName("en attente");

        // Distribute each Participation into the correct series
        for (Participation p : participations) {
            String date = p.getDate_inscription().toString();
            Number seminaireId = p.getID_Seminaire();

            switch (p.getStatut().toLowerCase()) {
                case "présent":
                    confirmeSeries.getData().add(new XYChart.Data<>(date, seminaireId));
                    break;
                case "Inscrit":
                    presentSeries.getData().add(new XYChart.Data<>(date, seminaireId));
                    break;
                case "en attente":
                    absentSeries.getData().add(new XYChart.Data<>(date, seminaireId));
                    break;
                default:
                    // If there are other statuses, handle them here or ignore
                    break;
            }
        }

        // Add all series to the scatter chart
        scatterChart.getData().addAll(confirmeSeries, presentSeries, absentSeries);

        // Color each series differently
        Platform.runLater(() -> {
            // Color the series lines (though scatter typically doesn't show lines, only points)
            confirmeSeries.getNode().lookup(".chart-series-line").setStyle("-fx-stroke: red;");
            presentSeries.getNode().lookup(".chart-series-line").setStyle("-fx-stroke: green;");
            absentSeries.getNode().lookup(".chart-series-line").setStyle("-fx-stroke: yellow;");

            // Color the individual scatter points
            for (XYChart.Data<String, Number> data : confirmeSeries.getData()) {
                data.getNode().setStyle("-fx-background-color: red, white;");
            }
            for (XYChart.Data<String, Number> data : presentSeries.getData()) {
                data.getNode().setStyle("-fx-background-color: green, white;");
            }
            for (XYChart.Data<String, Number> data : absentSeries.getData()) {
                data.getNode().setStyle("-fx-background-color: yellow, white;");
            }
        });
    }
    private void showAgendaPopup() {
        Stage popupStage = new Stage();
        popupStage.initModality(Modality.APPLICATION_MODAL);
        popupStage.setTitle("Agenda");

        Label agendaLabel = new Label("Upcoming Seminars:\n- Seminar A: 2023-10-15\n- Seminar B: 2023-11-20");
        VBox popupContent = new VBox(agendaLabel);
        popupContent.setPadding(new Insets(20));

        Scene popupScene = new Scene(popupContent, 300, 200);
        popupStage.setScene(popupScene);
        popupStage.showAndWait();
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}