package com.melocode.semin.controllers;






import com.melocode.semin.dao.ParticipationDAO;
import com.melocode.semin.dao.SeminaireDAO;
import com.melocode.semin.models.Participation;
import com.melocode.semin.models.Seminaire;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
        import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.util.List;

public class ParticipationCrudController {

    @FXML private TableView<Participation> tableView;
    @FXML private TableColumn<Participation, Integer> idColumn, employeIdColumn, seminaireIdColumn;
    @FXML private TableColumn<Participation, String> statutColumn;
    @FXML private TableColumn<Participation, LocalDate> dateInscriptionColumn;
    @FXML private TableColumn<Participation, String> evaluationColumn, certificatColumn;
    @FXML private TextField statutField, evaluationField, certificatField;
    @FXML private ComboBox<String> seminaireComboBox;
    @FXML private Label coutLabel;
    @FXML private PieChart pieChart;
    @FXML private ScatterChart<String, Number> scatterChart;
    @FXML private AnchorPane agendaPopup;

    private ObservableList<Participation> participationList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // Initialize table columns
        idColumn.setCellValueFactory(cellData -> cellData.getValue().ID_ParticipationProperty().asObject());
        seminaireIdColumn.setCellValueFactory(cellData -> cellData.getValue().ID_SeminaireProperty().asObject());
        statutColumn.setCellValueFactory(cellData -> cellData.getValue().statutProperty());
        dateInscriptionColumn.setCellValueFactory(cellData -> cellData.getValue().dateInscriptionProperty());
        evaluationColumn.setCellValueFactory(cellData -> cellData.getValue().evaluationProperty());
        certificatColumn.setCellValueFactory(cellData -> cellData.getValue().certificatProperty());

        // Load seminars into ComboBox
        loadSeminars();
        // Load participations into TableView
        loadParticipations();
        // Initialize charts
        initializeCharts();
    }

    private void loadSeminars() {
        SeminaireDAO seminarDAO = new SeminaireDAO();
        List<Seminaire> seminars = seminarDAO.getAllSeminaires();
        ObservableList<String> seminarNames = FXCollections.observableArrayList();
        for (Seminaire seminar : seminars) {
            seminarNames.add(seminar.getNom());
        }
        seminaireComboBox.setItems(seminarNames);
    }

    @FXML
    private void ajouterParticipation() {
        String statut = statutField.getText();
        String evaluation = evaluationField.getText();
        String certificat = certificatField.getText();
        String selectedSeminar = seminaireComboBox.getValue();

        if (statut.isEmpty() || selectedSeminar == null) {
            showAlert(Alert.AlertType.WARNING, "Validation Error", "Please fill in all the required fields.");
            return;
        }

        SeminaireDAO seminarDAO = new SeminaireDAO();
        Seminaire seminar = seminarDAO.getSeminarByName(selectedSeminar);

        if (seminar == null) {
            showAlert(Alert.AlertType.ERROR, "Seminar Error", "Selected seminar does not exist.");
            return;
        }

        Participation newParticipation = new Participation(
                0, // ID is generated by the database
                1, // ID_Employe (You can pass the actual employee ID here)
                seminar.getId(),
                statut,
                LocalDate.now(),
                evaluation,
                certificat
        );

        ParticipationDAO participationDAO = new ParticipationDAO();
        participationDAO.ajouterParticipation(newParticipation);

        loadParticipations();
        //updateCharts();
    }

    @FXML
    private void supprimerParticipation() {
        Participation selected = tableView.getSelectionModel().getSelectedItem();
        if (selected != null) {
            ParticipationDAO participationDAO = new ParticipationDAO();
            participationDAO.supprimerParticipation(selected.getID_Participation());
            loadParticipations();
          //  updateCharts();
        } else {
            showAlert(Alert.AlertType.WARNING, "Selection Error", "Please select a participation to delete.");
        }
    }

    private void loadParticipations() {
        ParticipationDAO participationDAO = new ParticipationDAO();
        participationList.clear();
        participationList.addAll(participationDAO.getAllParticipations());
        tableView.setItems(participationList);
    }

    private void initializeCharts() {
        // Pie Chart: Participation Status Distribution
        updatePieChart();

        // Scatter Chart: Seminar Participation Over Time
        updateScatterChart();
    }

    private void updatePieChart() {
        pieChart.getData().clear();
        ParticipationDAO participationDAO = new ParticipationDAO();
        List<Participation> participations = participationDAO.getAllParticipations();

        long confirmed = participations.stream().filter(p -> p.getStatut().equals("Confirmé")).count();
        long pending = participations.stream().filter(p -> p.getStatut().equals("En attente")).count();
        long cancelled = participations.stream().filter(p -> p.getStatut().equals("Annulé")).count();

        pieChart.getData().add(new PieChart.Data("Confirmé", confirmed));
        pieChart.getData().add(new PieChart.Data("En attente", pending));
        pieChart.getData().add(new PieChart.Data("Annulé", cancelled));
    }

    private void updateScatterChart() {
        scatterChart.getData().clear();
        ParticipationDAO participationDAO = new ParticipationDAO();
        List<Participation> participations = participationDAO.getAllParticipations();

        XYChart.Series<String, Number> series = new XYChart.Series<>();
        series.setName("Participations");

        for (Participation p : participations) {
            series.getData().add(new XYChart.Data<>(p.getDate_inscription().toString(), p.getID_Seminaire()));
        }

        scatterChart.getData().add(series);
    }

    @FXML
    private void showAgendaPopup() {
        Stage popupStage = new Stage();
        popupStage.initModality(Modality.APPLICATION_MODAL);
        popupStage.setTitle("Agenda");

        // Load agenda content (you can customize this)
        Label agendaLabel = new Label("Upcoming Seminars:\n- Seminar A: 2023-10-15\n- Seminar B: 2023-11-20");
        VBox popupContent = new VBox(agendaLabel);
        popupContent.setPadding(new Insets(20));

        Scene popupScene = new Scene(popupContent, 300, 200);
        popupStage.setScene(popupScene);
        popupStage.showAndWait();
    }

    private void showAlert(Alert.AlertType alertType, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}